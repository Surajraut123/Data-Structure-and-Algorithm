/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, HTML, CSS, JS
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>
#include<queue>
using namespace std;


class node{
    public:
    
    int data;
    node* left;
    node* right;
    
    node(int data) {
        this->data = data;
        this -> left = NULL;
        this -> right = NULL;
    }
};

node* buildtree(node* root) {
    cout<<"Enter the data "<<endl;
    int data;
    cin>>data;
    
    root = new node(data);
    
    if(data == -1) {
        return NULL;
    }
    
    cout<<"Enter the data at left of "<<data<<endl;
    root -> left = buildtree(root -> left);
    
    cout<<"Enter the data at right of "<<data<<endl;
    root -> right = buildtree(root -> right);
    
    return root;
}

void levelOrderTraversal(node* root){
    queue<node*> q;
    q.push(root);
    
    while(!q.empty()) {
        node* tmp = q.front();
        q.pop();
        cout<<tmp -> data <<" ";
        
        if(tmp -> left) {
            q.push(tmp ->left);
        }
        if(tmp -> right) {
            q.push(tmp -> right);
        }
    }
}

void inorderTraversal(node* root) {
    if(root == NULL) {
        return;
    }
    
    inorderTraversal(root -> left);
    cout<<root->data<<" ";
    inorderTraversal(root -> right);
}

void preOrdertraversal(node* root) {
    if(root==NULL) {
        return;
    }
    
    cout<<root->data<<" ";
    preOrdertraversal(root->left);
    preOrdertraversal(root->right);
    
}


void postOrderTraversal(node* root){
    if(root==NULL) {
        return;
    }
    postOrderTraversal(root ->left);
    postOrderTraversal(root ->right);
    cout<<root->data<<" ";
}

int HeightofTree(node* root) {
    if(root == NULL) {
        return 0;
    }
    
    cout<<"At Node : "<<root->data<<endl;
    int left = HeightofTree(root -> left);
    cout<<"Left : "<<left<<endl;
    cout<<"At Node : "<<root->data<<endl;
    int right = HeightofTree(root -> right);
    cout<<"Right : "<<right<<endl;
    int ans = max(left,right) + 1;
    cout<<"Ans : "<<ans<<endl;
    
    cout<<endl;
    return ans;
}

int main()
{
    node* root = NULL;
    
    root = buildtree(root);
    
    cout<<"levelOrderTraversal : " ;
    levelOrderTraversal(root);
    cout<<endl;
    
    cout<<"inorderTraversal : " ;
    inorderTraversal(root);
    cout<<endl;
    cout<<"preOrdertraversal : " ;
    preOrdertraversal(root);
    cout<<endl;
    cout<<"postOrderTraversal : " ;
    postOrderTraversal(root);
    cout<<endl;
    
    int Height = HeightofTree(root);
    cout<<"Height of tree : "<<Height<<endl;

    return 0;
}
